{"version":3,"sources":["api/verbs-api.js","redux/challenge-reducer.js","Components/Home/Home.jsx","assets/images/heart.png","Components/Challenge/ChallengeHeadear/CompetitiveHeader.jsx","Components/Challenge/ChallengeForm/CompetitiveFrom.jsx","redux/result-reducer.js","Components/Challenge/Competitive.jsx","Components/EndPage/EndPage.jsx","Components/Loader/Loader.jsx","Components/LeaderBoard/LeaderBoard.jsx","Components/Learn/LearnHeader/LearnHeader.jsx","Components/Learn/LearnForm/LearnForm.jsx","Components/Learn/Learn.jsx","App.jsx","reportWebVitals.js","redux/store.js","index.js"],"names":["verbsAPI","axios","get","process","then","r","data","FETCHING_START","FETCHING_COMPLETE","GET_VERBS_SUCCESS","GET_VERBS_FAIL","UPDATE_VERBS","initialState","verbs","isFetching","error","updateVerbs","payload","type","completeFetching","Home","dispatch","useDispatch","useEffect","a","response","localStorage","setItem","JSON","stringify","console","log","className","Button","variant","component","Link","to","ChallengeHeader","React","memo","currentVerb","score","life","setIsTyping","useState","isUntyped","setIsUntyped","challenge","setChallenge","cursor","setCursor","showCursor","setShowCursor","infinitive","text","setTimeout","slice","length","trim","untype","String","setInterval","prev","map","l","i","src","heartImage","alt","CompetitiveFrom","onSubmit","setStatus","isSubmit","errors","generateVerb","setErrors","setIsSubmit","isTyping","formik","useFormik","initialValues","past","pastParticiple","handleSubmit","autoComplete","TextField","InputProps","readOnly","label","name","onChange","handleChange","onBlur","handleBlur","value","values","touched","helperText","disabled","fullWidth","color","onClick","resetForm","UPDATE_RESULT","totalScore","getItem","mistakesList","updateResult","Competitive","props","verbsList","useSelector","state","parse","setMistakesList","setLife","setScore","setCurrentVerb","index","Math","floor","random","newVerbsList","splice","errorsCount","Object","keys","key","toLowerCase","userInfinitive","userPast","userPastParticiple","Row","verb","mistake","open","setOpen","TableRow","TableCell","scope","align","IconButton","aria-label","size","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","gutterBottom","Table","TableHead","TableBody","EndPage","result","TableContainer","Paper","Loader","CircularProgress","LeaderBoard","username","cachedScore","firestore","useContext","Context","useCollectionData","collection","orderBy","users","loading","doc","update","createdAt","firebase","FieldValue","serverTimestamp","set","inputProps","parseFloat","user","Date","seconds","toDateString","LearnHeader","LearnFrom","Learn","isStop","setIsStop","LearnForm","App","status","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","removeItem","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"qYAGaA,EACC,WACN,OAAOC,IAAMC,IAAN,UAAaC,6BAAb,gBAAkDC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,SCHvEC,EAAiB,iBACjBC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAiB,oBACjBC,EAAe,eAEfC,EAAe,CACjBC,MAAO,GACPC,YAAY,EACZC,OAAO,GA2BEC,EAAc,SAACC,GACxB,MAAO,CACHC,KAAMP,EACNM,YASFE,EAAmB,WACrB,MAAO,CACHD,KAAMV,I,OCfCY,EA/BF,WAET,IAAMC,EAAWC,cAMjB,OAJAC,qBAAU,WACNF,EDwDgB,uCAAM,WAAOA,GAAP,eAAAG,EAAA,sEAEtBH,EAvBG,CACHH,KAAMX,IAoBgB,SAGCP,IAHD,OAGhByB,EAHgB,OAItBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,IAC7CJ,EAhBG,CACHH,KAAMT,EACNQ,QAcyBQ,IACzBJ,EAASF,KANa,kDAQtBW,QAAQC,IAAR,MACAV,EAdG,CACHH,KAAMR,IAcNW,EAASF,KAVa,0DAAN,yDCvDjB,IAGC,0BAASa,UAAU,WAAnB,UACI,sBAAMA,UAAU,oBAAhB,wBACA,oBAAIA,UAAU,kBAAd,uCACA,mBAAGA,UAAU,qBAAb,2FAGA,uBACA,mBAAGA,UAAU,gBAAb,8FAGA,sBAAKA,UAAU,qBAAf,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWF,UAAU,mBAAmBG,UAAWC,IAAMC,GAAI,eAA7E,8BAEA,sBAAML,UAAU,4BAAhB,gBACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWF,UAAU,mBAAmBG,UAAWC,IAAMC,GAAI,SAA7E,kC,QC7BD,MAA0B,kCC6D1BC,EAzDSC,IAAMC,MAAK,YAA8C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,YAE3D,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAkCF,mBAAS,uBAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAwCA,OAlBA9B,qBAAU,WACDuB,GAAaL,EAAYa,aAAeN,EAGlCF,GAAaL,EAAYa,aAAeN,EAxBxC,WACX,IAAIO,EAAOd,EAAYa,WACvBE,YAAW,WACPD,EAAOA,EAAKE,MAAM,EAAGT,EAAUU,OAAS,GACxCT,EAAaM,EAAKI,UACnB,KAoBCC,IAEAhB,GAAY,GACZG,GAAa,KANbH,GAAY,GAdP,WACT,IAAIW,EAAOP,EACXQ,YAAW,WACPD,EAAOA,EAAKE,MAAM,EAAGF,EAAKG,OAAS,GACnCT,EAAaM,GACY,IAArBP,EAAUU,SACVX,GAAa,GACbE,EAAaY,OAAO,SAEzB,KAMC3C,IAOCgC,IACDC,GAAU,GACVW,aAAY,WACRT,GAAc,SAAAU,GAAI,OAAKA,OACxB,QAER,CAACtB,EAAaO,IAGb,sBAAKhB,UAAU,mBAAf,UACI,sBAAMA,UAAU,mBAAhB,SAAoCW,EAAKqB,KAAI,SAACC,EAAGC,GAAJ,OAAU,qBAAalC,UAAW,mBAAoBmC,IAAKC,EAAYC,IAAK1B,EAAKe,QAA7DQ,QACjE,uBAAMlC,UAAU,mBAAhB,oBAA2CU,KAC3C,qBAAIV,UAAU,kBAAd,UACKgB,EAAU,sBAAMhB,UAAW,oBAAjB,SAAuCoB,EAAa,IAAM,uD,iBC4CtEkB,EA9FS,SAAC,GAAmG,IAAlGC,EAAiG,EAAjGA,SAAUC,EAAuF,EAAvFA,UAAWC,EAA4E,EAA5EA,SAAUC,EAAkE,EAAlEA,OAAQC,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,YAAalC,EAAoB,EAApBA,KAAMmC,EAAc,EAAdA,SAEnGC,EAASC,YAAU,CACrBC,cAAe,CACX3B,WAAY,GACZ4B,KAAM,GACNC,eAAgB,IAEpBZ,aAeJ,OACI,uBAAMA,SAAUQ,EAAOK,aAAcC,aAAc,MAAnD,UACI,sBAAKrD,UAAU,yBAAf,UACI,cAACsD,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEdzC,UAAW,mBACXE,QAAS,WACTuD,MAAO,aACPvE,KAAK,OACLwE,KAAK,aACLC,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAO1C,aAExByB,EAAOL,OAAOpB,YAAcyB,EAAOkB,QAAQ3C,YAAcyB,EAAOL,OAAOpB,WACxE,cAACgC,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEd1D,QAAS2D,EAAOQ,KAChBlD,UAAW,mBACXE,QAAS,WACTuD,MAAO,YACPvE,KAAK,OACLwE,KAAK,OACLQ,WAAYxB,EAAOQ,KACnBS,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAOd,OAExBH,EAAOL,OAAOQ,MAAQH,EAAOkB,QAAQf,MAAQH,EAAOL,OAAOQ,KAC5D,cAACI,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEd1D,QAAS2D,EAAOS,eAChBnD,UAAW,mBACXE,QAAS,WACTuD,MAAO,YACPvE,KAAK,OACLwE,KAAK,iBACLQ,WAAYxB,EAAOS,eACnBQ,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAOb,iBAExBJ,EAAOL,OAAOS,gBAAkBJ,EAAOkB,QAAQd,gBAAkBJ,EAAOL,OAAOS,kBAEpF,sBAAKnD,UAAU,0BAAf,UACI,cAACC,EAAA,EAAD,CAAQkE,SAAU1B,GAAYK,EAAUsB,WAAS,EAACpE,UAAW,oBAAqBE,QAAS,YAAamE,MAAO,UACvGnF,KAAK,SADb,oBAIiB,IAAhByB,EAAKe,OAEF,cAACzB,EAAA,EAAD,CAAQkE,UAAW1B,EAAU2B,WAAS,EAACpE,UAAW,oBAAqBE,QAAS,YAAaC,UAAWC,IAAMC,GAAI,UAAlH,kBAIA,cAACJ,EAAA,EAAD,CAAQqE,QAzEC,WACrBvB,EAAOwB,YACP3B,EAAU,CACNtB,WAAY,GACZ4B,KAAM,GACNC,eAAgB,KAEpBX,EAAU,WACVK,GAAY,GACZF,KAgE+CwB,UAAW1B,EAAU2B,WAAS,EAACpE,UAAW,oBAAqBE,QAAS,YAAamE,MAAO,YAA/H,yBCxFdG,EAAgB,gBAEhB5F,EAAe,CACjB6F,WAAY/E,aAAagF,QAAQ,cACjChE,MAAO,EACPiE,aAAc,IA4BLC,EAAe,SAAC3F,GACzB,MAAO,CACHC,KAAMsF,EACNvF,YC6EO4F,EA1GKtE,IAAMC,MAAK,SAACsE,GAE5B,IAAIC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMjE,UAAUnC,SAErDkG,EAAiC,IAArBA,EAAUrD,OAAe9B,KAAKsF,MAAMxF,aAAagF,QAAQ,UAAYK,EACjF,MAAwClE,qBAAxC,mBAAO8D,EAAP,KAAqBQ,EAArB,KACA,EAAwBtE,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAAjD,mBAAOF,EAAP,KAAayE,EAAb,KACA,EAA0BvE,mBAAS,GAAnC,mBAAOH,EAAP,KAAc2E,EAAd,KACA,EAAgCxE,oBAAS,GAAzC,mBAAOiC,EAAP,KAAiBlC,EAAjB,KACA,EAAsCC,mBAAS,IAA/C,mBAAOJ,EAAP,KAAoB6E,EAApB,KACA,EAAgCzE,oBAAS,GAAzC,mBAAO4B,EAAP,KAAiBI,EAAjB,KACA,EAA0BhC,mBAAS,CAC/BS,WAAY,GACZ4B,KAAM,GACNC,eAAgB,KAHpB,mBAAKT,EAAL,KAAaE,EAAb,KAMMvD,EAAWC,cAEXqD,EAAe,WACjB,IAAI4C,EAAQC,KAAKC,MAAMD,KAAKE,SAAWX,EAAUrD,QACjD4D,EAAeP,EAAUQ,IACzB,IAAII,EAAY,YAAOZ,GACvBY,EAAaC,OAAOL,EAAO,GAC3BlG,EAASL,EAAY2G,MA2CzBpG,qBAAU,WACNoD,MACD,IAGiB,IAAhBhC,EAAKe,SAKLrC,EAASuF,EAJE,CACPD,eACAjE,WAKR,OACI,0BAASV,UAAU,YAAnB,UACI,cAAC,EAAD,CACIY,YAAaA,EACbH,YAAaA,EACbC,MAAOA,EACPC,KAAMA,EACNgE,aAAcA,IAElB,cAAC,EAAD,CACI7B,SAAUA,EACVN,UAAWsC,EAAMtC,UACjBD,SAjES,SAACyB,GAClB,IAAI6B,EAAc,EAClBhD,GAAY,GACZiD,OAAOC,KAAK/B,GAAQhC,KAAI,SAAAgE,GAChBvF,EAAYuF,GAAKC,cAActE,SAAWqC,EAAOgC,GAAKC,cAActE,SACpEkE,IACAV,GAAgB,SAAApD,GACZ,OAAO,2BACAA,GADP,kBAEKtB,EAAYa,WAAa,CACtBA,WAAYb,EAAYa,WACxB4B,KAAMzC,EAAYyC,KAClBC,eAAgB1C,EAAY0C,eAC5B+C,eAAgBlC,EAAO1C,WACvB6E,SAAUnC,EAAOd,KACjBkD,mBAAoBpC,EAAOb,qBAIvCP,GAAU,SAAAb,GACN,OAAO,2BACAA,GADP,kBAEKiE,EAAMvF,EAAYuF,YAKf,IAAhBH,GACAf,EAAMtC,UAAU,WAChB6C,GAAS,SAAAtD,GAAI,OAAIA,EAAO,MACD,IAAhB8D,GACPf,EAAMtC,UAAU,WAChB4C,GAAQ,SAAArD,GAAI,OAAIA,EAAKN,MAAM,EAAGM,EAAKL,OAAS,MAC5C2D,GAAS,SAAAtD,GAAI,OAAIA,EAAO,QAExBqD,GAAQ,SAAArD,GAAI,OAAIA,EAAKN,MAAM,EAAGM,EAAKL,OAAS,MAC5CoD,EAAMtC,UAAU,WA8BZG,aAAcA,EACdD,OAAQA,EACRD,SAAUA,EACVG,UAAWA,EACXC,YAAaA,EACblC,KAAMA,U,wIC9CtB,SAAS0F,GAAT,GAA+B,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAEhB,EAAwB1F,oBAAS,GAAjC,mBAAO2F,EAAP,KAAaC,EAAb,KAEA,OACI,qCACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAWrC,QAAS,kBAAMmC,GAASD,IAAOrG,UAAU,KAAKyG,MAAM,MAAMC,MAAO,SAA5E,UACI,cAACC,EAAA,EAAD,CAAYC,aAAW,aAAaC,KAAK,QAAzC,SACKR,EAAO,cAAC,KAAD,IAAyB,cAAC,IAAD,MAEpCF,OAGT,cAACI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWM,MAAO,CAACC,cAAe,EAAGC,WAAY,GAAIC,QAAS,EAA9D,SACI,cAACC,EAAA,EAAD,CAAUC,GAAId,EAAMe,QAAQ,OAAOC,eAAa,EAAhD,SACI,eAACC,EAAA,EAAD,CAAKC,OAAQ,EAAb,UACI,cAACC,EAAA,EAAD,CAAYzH,QAAQ,KAAK0H,cAAY,EAACzH,UAAU,MAAhD,SACKmG,IAEL,eAACuB,EAAA,EAAD,CAAOb,KAAK,QAAQD,aAAW,YAA/B,UACI,cAACe,EAAA,EAAD,UACI,eAACpB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,gCAGR,eAACoB,EAAA,EAAD,WACI,eAACrB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACKJ,EAAQL,iBAEb,cAACS,EAAA,EAAD,UACKJ,EAAQjF,gBAGjB,eAACoF,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACKJ,EAAQJ,WAEb,cAACQ,EAAA,EAAD,UACKJ,EAAQrD,UAGjB,eAACwD,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACKJ,EAAQH,qBAEb,cAACO,EAAA,EAAD,UACKJ,EAAQpD,sCAatC6E,OAtGC,SAAC,GAAiB,IAAhBxF,EAAe,EAAfA,UAEdjD,qBAAU,WACNiD,EAAU,aACX,IAEH,IAAIyF,EAASjD,aAAY,SAAAC,GAAK,OAAIA,EAAMgD,UACxC,OACI,sBAAKjI,UAAW,UAAhB,UACI,oBAAIA,UAAU,iBAAd,sDACA,uBAAMA,UAAU,iBAAhB,yBAA8CiI,EAAOvH,SACrD,uBAAMV,UAAU,iBAAhB,+BAAoDiI,EAAOxD,cAC3D,qBAAKzE,UAAU,oBAAf,SACI,cAACkI,EAAA,EAAD,CAAgB/H,UAAWgI,IAA3B,SACI,eAACN,EAAA,EAAD,CAAOd,aAAW,oBAAlB,UACI,cAACe,EAAA,EAAD,UACI,cAACpB,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAWE,MAAO,SAAUO,QAAS,EAArC,+BAGR,cAACW,EAAA,EAAD,UACKjC,OAAOC,KAAKkC,EAAOtD,cAAc3C,KAAI,SAACgE,EAAKT,GAAN,OAAgB,cAACc,GAAD,CAAiBC,KAAMN,EAClBO,QAAS0B,EAAOtD,aAAaqB,IADxBT,eAMhF,sBAAKvF,UAAU,oBAAf,UACI,cAACC,EAAA,EAAD,CAAQD,UAAW,mBAAoBE,QAAS,WAAYC,UAAWC,IAAMC,GAAI,eAAjF,wBAEA,cAACJ,EAAA,EAAD,CAAQD,UAAW,mBAAoBE,QAAS,WAAYC,UAAWC,IAAMC,GAAI,SAAjF,yBAEA,cAACJ,EAAA,EAAD,CAAQD,UAAW,mBAAoBE,QAAS,WAAYC,UAAWC,IAC/DC,GAAI,eADZ,gC,6BCzCD+H,GARA7H,IAAMC,MAAK,WACtB,OACI,qBAAKR,UAAW,WAAhB,SACI,cAACqI,GAAA,EAAD,CAAkBrB,KAAM,WC0GrBsB,GAvGK,WAEhB,IAAIC,EAAW7I,aAAagF,QAAQ,kBAChC8D,EAAc9I,aAAagF,QAAQ,cAEnCuD,EAASjD,aAAY,SAAAC,GAAK,OAAIA,EAAMgD,UAEjCQ,EAAaC,qBAAWC,IAAxBF,UACP,EAAyBG,aACrBH,EAAUI,WAAW,eAAeC,QAAQ,aAAc,SAD9D,mBAAOC,EAAP,KAAcC,EAAd,KAIMzG,EAAQ,uCAAG,WAAOwB,GAAP,SAAAvE,EAAA,0DACT+I,EADS,gCAEHE,EAAUI,WAAW,eAAeI,IAAIV,GAAUW,OAAO,CAC3DxF,KAAM6E,EACN9D,WAAYwD,EAAOxD,WACnB0E,UAAWC,KAASX,UAAUY,WAAWC,oBALpC,oCAQT5J,aAAaC,QAAQ,iBAAkBoE,EAAML,MARpC,SASH+E,EAAUI,WAAW,eAAeI,IAAIlF,EAAML,MAAM6F,IAAI,CAC1D7F,KAAMK,EAAML,KACZe,YAAawD,EAAOxD,WACpB0E,UAAWC,KAASX,UAAUY,WAAWC,oBAZpC,2CAAH,sDAkBRvG,EAASC,YAAU,CACrBC,cAAe,CACXS,KAAM,IAEVnB,aAGJ,OAAIyG,EACO,cAAC,GAAD,IAKP,sBAAKhJ,UAAU,cAAf,UACI,sBAAKA,UAAU,sBAAf,UACI,sBAAMA,UAAU,0BAAhB,SAA2CiI,EAAOxD,aAClD,mBAAGzE,UAAU,wBAAb,iEAGA,uBAAMuC,SAAUQ,EAAOK,aAAcpD,UAAU,uBAA/C,UACI,cAACsD,EAAA,EAAD,CACIK,SAAUZ,EAAOa,aACjB4F,WAAY,CACRhG,WAAY+E,GAEhBxE,MAAOwE,GAAsBxF,EAAOiB,OAAON,KAC3CA,KAAM,OACNxE,KAAM,OACNgB,QAAS,WACTuD,MAAO,cAEX,cAACxD,EAAA,EAAD,CAAQkE,SAAUsF,WAAWjB,IAAgBP,EAAOxD,WAAYvF,KAAM,SAAUgB,QAAS,YAAzF,0BAGR,sBAAKF,UAAU,sBAAf,UACI,oBAAIA,UAAU,qBAAd,yBACA,qBAAKA,UAAU,6BAAf,SACI,wBAAOA,UAAU,qBAAjB,UACI,uBAAOA,UAAW,0BAAlB,SACA,+BACI,mCACA,sCACA,uCACA,2CAGJ,uBAAOA,UAAW,0BAAlB,SACC+I,EAAM/G,KAAI,SAAC0H,EAAMnE,GAAW,IAAD,EACxB,OACI,+BACI,6BAAKA,EAAQ,IACb,6BAAKmE,EAAKhG,OACV,6BAAKgG,EAAKjF,aACV,6BAAK,IAAIkF,KAA6B,KAAxB,UAAAD,EAAKP,iBAAL,eAAgBS,UAAcC,mBAJvCtE,gBAa7B,sBAAKvF,UAAU,oBAAf,UACI,cAACC,EAAA,EAAD,CAAQD,UAAW,mBAAoBE,QAAS,WAAYC,UAAWC,IAAMC,GAAI,eAAjF,wBAEA,cAACJ,EAAA,EAAD,CAAQD,UAAW,mBAAoBE,QAAS,WAAYC,UAAWC,IAAMC,GAAI,SAAjF,gCC9CDyJ,GAxDKvJ,IAAMC,MAAK,YAAiC,IAA/BC,EAA8B,EAA9BA,YAAaG,EAAiB,EAAjBA,YAE1C,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAkCF,mBAAS,YAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAyCA,OAlBA9B,qBAAU,WACDuB,GAAaL,EAAYa,aAAeN,EAGlCF,GAAaL,EAAYa,aAAeN,EAxBxC,WACX,IAAIO,EAAOd,EAAYa,WACvBE,YAAW,WACPD,EAAOA,EAAKE,MAAM,EAAGT,EAAUU,OAAS,GACxCT,EAAaM,EAAKI,UACnB,KAoBCC,IAEAhB,GAAY,GACZG,GAAa,KANbH,GAAY,GAdP,WACT,IAAIW,EAAOP,EACXQ,YAAW,WACPD,EAAOA,EAAKE,MAAM,EAAGF,EAAKG,OAAS,GACnCT,EAAaM,GACY,IAArBP,EAAUU,SACVX,GAAa,GACbE,EAAaY,OAAO,SAEzB,KAMC3C,IAOCgC,IACDC,GAAU,GACVW,aAAY,WACRT,GAAc,SAAAU,GAAI,OAAKA,OACxB,QAER,CAACtB,EAAaO,IAGb,qBAAKhB,UAAU,mBAAf,SACI,qBAAIA,UAAU,kBAAd,UACKgB,EAAU,sBAAMhB,UAAW,oBAAjB,SAAuCoB,EAAa,IAAM,sDCwCtE2I,GAzFG,SAAC,GAA6F,IAA5FxH,EAA2F,EAA3FA,SAAUC,EAAiF,EAAjFA,UAAWC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,OAAQC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SAEvFC,EAASC,YAAU,CACrBC,cAAe,CACX3B,WAAY,GACZ4B,KAAM,GACNC,eAAgB,IAEpBZ,aAeJ,OACI,uBAAMA,SAAUQ,EAAOK,aAAcC,aAAc,MAAnD,UACI,sBAAKrD,UAAU,yBAAf,UACI,cAACsD,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEdzC,UAAW,mBACXE,QAAS,WACTuD,MAAO,aACPvE,KAAK,OACLwE,KAAK,aACLC,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAO1C,aAExByB,EAAOL,OAAOpB,YAAcyB,EAAOkB,QAAQ3C,YAAcyB,EAAOL,OAAOpB,WACxE,cAACgC,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEd1D,QAAS2D,EAAOQ,KAChBlD,UAAW,mBACXE,QAAS,WACTuD,MAAO,YACPvE,KAAK,OACLwE,KAAK,OACLQ,WAAYxB,EAAOQ,KACnBS,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAOd,OAExBH,EAAOL,OAAOQ,MAAQH,EAAOkB,QAAQf,MAAQH,EAAOL,OAAOQ,KAC5D,cAACI,EAAA,EAAD,CACIC,WAAY,CACRC,SAAUf,GAEd1D,QAAS2D,EAAOS,eAChBnD,UAAW,mBACXE,QAAS,WACTuD,MAAO,YACPvE,KAAK,OACLwE,KAAK,iBACLQ,WAAYxB,EAAOS,eACnBQ,SAAUZ,EAAOa,aACjBC,OAAQd,EAAOe,WACfC,MAAOhB,EAAOiB,OAAOb,iBAExBJ,EAAOL,OAAOS,gBAAkBJ,EAAOkB,QAAQd,gBAAkBJ,EAAOL,OAAOS,kBAEpF,sBAAKnD,UAAU,0BAAf,UACI,cAACC,EAAA,EAAD,CAAQkE,SAAU1B,GAAYK,EAAUsB,WAAS,EAACpE,UAAW,oBAAqBE,QAAS,YACnFmE,MAAO,UACPnF,KAAK,SAFb,oBAKA,cAACe,EAAA,EAAD,CAAQqE,QApEK,WACrBvB,EAAOwB,YACP3B,EAAU,CACNtB,WAAY,GACZ4B,KAAM,GACNC,eAAgB,KAEpBX,EAAU,WACVK,GAAY,GACZF,KA2D2CwB,UAAW1B,EAAU2B,WAAS,EAACpE,UAAW,oBACrEE,QAAS,YAAamE,MAAO,YADrC,yBCyBD2F,GAnGDzJ,IAAMC,MAAK,SAACsE,GAEtB,IAAIC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMjE,UAAUnC,SAErDkG,EAAiC,IAArBA,EAAUrD,OAAe9B,KAAKsF,MAAMxF,aAAagF,QAAQ,UAAYK,EACjF,MAAgClE,oBAAS,GAAzC,mBAAOiC,EAAP,KAAiBlC,EAAjB,KACA,EAA4BC,oBAAS,GAArC,mBAAOoJ,EAAP,KAAeC,EAAf,KACA,EAAwCrJ,qBAAxC,mBAAO8D,EAAP,KAAqBQ,EAArB,KACA,EAAsCtE,mBAAS,IAA/C,mBAAOJ,EAAP,KAAoB6E,EAApB,KACA,EAAgCzE,oBAAS,GAAzC,mBAAO4B,EAAP,KAAiBI,EAAjB,KACA,EAA0BhC,mBAAS,CAC/BS,WAAY,GACZ4B,KAAM,GACNC,eAAgB,KAHpB,mBAAKT,EAAL,KAAaE,EAAb,KAMMvD,EAAWC,cAEXqD,EAAe,WACjB,IAAI4C,EAAQC,KAAKC,MAAMD,KAAKE,SAAWX,EAAUrD,QACjD4D,EAAeP,EAAUQ,IACzB,IAAII,EAAY,YAAOZ,GACvBY,EAAaC,OAAOL,EAAO,GAC3BlG,EAASL,EAAY2G,KA2CzB,OAJApG,qBAAU,WACNoD,MACD,IAECsH,GAKA5K,EAASuF,EAJE,CACPD,eACAjE,MAAO,KAGJ,cAAC,IAAD,CAAUL,GAAI,aAIrB,0BAASL,UAAU,YAAnB,UACI,cAAC,GAAD,CACIY,YAAaA,EACbH,YAAaA,IAEjB,cAAC0J,GAAD,CACIrH,SAAUA,EACVN,UAAWsC,EAAMtC,UACjBD,SA1DS,SAACyB,GAClB,IAAI6B,EAAc,EAClBhD,GAAY,GACZiD,OAAOC,KAAK/B,GAAQhC,KAAI,SAAAgE,GAChBvF,EAAYuF,GAAKC,cAActE,SAAWqC,EAAOgC,GAAKC,cAActE,SACpEkE,IACAV,GAAgB,SAAApD,GACZ,OAAO,2BACAA,GADP,kBAEKtB,EAAYa,WAAa,CACtBA,WAAYb,EAAYa,WACxB4B,KAAMzC,EAAYyC,KAClBC,eAAgB1C,EAAY0C,eAC5B+C,eAAgBlC,EAAO1C,WACvB6E,SAAUnC,EAAOd,KACjBkD,mBAAoBpC,EAAOb,qBAIvCP,GAAU,SAAAb,GACN,OAAO,2BACAA,GADP,kBAEKiE,EAAMvF,EAAYuF,YAKf,IAAhBH,EACAf,EAAMtC,UAAU,WACO,IAAhBqD,EACPf,EAAMtC,UAAU,WAEhBsC,EAAMtC,UAAU,UA2BZG,aAAcA,EACdD,OAAQA,EACRD,SAAUA,EACVG,UAAWA,EACXC,YAAaA,IAEjB,qBAAK7C,UAAU,sBAAf,SACI,cAACC,EAAA,EAAD,CAAQqE,QAAS,kBAAM4F,GAAU,IAAOlK,UAAU,kBAAkBE,QAAS,WAA7E,0BClEDkK,OAzBf,WAEI,MAA4BvJ,mBAAS,WAArC,mBAAOwJ,EAAP,KAAe7H,EAAf,KAEA,OACI,qBAAKxC,UAAS,cAAoB,YAAXqK,EAAuBA,EAAS,IAAvD,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKpK,UAAWf,IACnC,cAAC,IAAD,CAAOkL,OAAK,EAACC,KAAM,eAAnB,SACI,cAAC,EAAD,CAAa/H,UAAWA,MAE5B,cAAC,IAAD,CAAO8H,OAAK,EAACC,KAAM,SAAnB,SACI,cAAC,GAAD,CAAO/H,UAAWA,MAEtB,cAAC,IAAD,CAAO8H,OAAK,EAACC,KAAM,UAAnB,SACI,cAAC,GAAD,CAAS/H,UAAWA,MAExB,cAAC,IAAD,CAAO8H,OAAK,EAACC,KAAM,eAAgBpK,UAAWmI,aChBnDkC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtM,MAAK,YAAkD,IAA/CuM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCFRO,GAAcC,aAAgB,CAChCjK,UfQ4B,WAAmC,IAAlCiE,EAAiC,uDAAzBrG,EAAcsM,EAAW,uCACvDhM,EAAiBgM,EAAjBhM,KAAMD,EAAWiM,EAAXjM,QACb,OAAQC,GACJ,KAAKX,EACD,OAAO,2BAAI0G,GAAX,IAAkBnG,YAAY,IAElC,KAAKN,EACD,OAAO,2BAAIyG,GAAX,IAAkBnG,YAAY,IAElC,KAAKL,EACD,OAAO,2BAAIwG,GAAX,IAAkBpG,MAAM,YAAKI,GAAUF,OAAO,IAElD,KAAKL,EACD,OAAO,2BAAIuG,GAAX,IAAkBlG,OAAO,IAE7B,KAAKJ,EACD,OAAO,2BAAIsG,GAAX,IAAkBpG,MAAM,YAAKI,KAEjC,QACI,OAAOgG,Ie1BfgD,OVEyB,WAAmC,IAAlChD,EAAiC,uDAAzBrG,EAAcsM,EAAW,uCACpDhM,EAAiBgM,EAAjBhM,KAAMD,EAAWiM,EAAXjM,QACb,OAAQC,GACJ,KAAKsF,EAED,IAAIC,EAUJ,OATI/E,aAAagF,QAAQ,eAErBD,GADAA,EAAagF,WAAW/J,aAAagF,QAAQ,gBACnBzF,EAAQyB,MAAQzB,EAAQyB,MAAQ+D,EAC1D/E,aAAayL,WAAW,cACxBzL,aAAaC,QAAQ,aAAc8E,KAEnC/E,aAAaC,QAAQ,aAAcV,EAAQyB,OAC3C+D,EAAaxF,EAAQyB,OAElB,2BACAuE,GADP,IACcN,aAAa,eAAK1F,EAAQ0F,cAAejE,MAAOzB,EAAQyB,MAAO+D,WAAYA,IAG7F,QACI,OAAOQ,MUnBbmG,GAAmBC,OAAOC,sCAAwCC,KAEpEC,GAAQC,aAAYT,GAAaI,GAAiBM,aAAgBC,QAEtEN,OAAOO,UAAYJ,GAEJA,U,OCNfpC,KAASyC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGZ,IAAMzD,GAAU0D,wBAAc,MAE/B5D,GAAYW,KAASX,YAE3B6D,IAASC,OACL,cAAC5D,GAAQ6D,SAAT,CAAkBzI,MAAO,CACrB0E,aACAW,eAFJ,SAII,cAAC,IAAD,CAAUoC,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRiB,SAASC,eAAe,SAM5BlC,O","file":"static/js/main.29748134.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nexport const verbsAPI = {\r\n    getVerbs: () => {\r\n        return axios.get(`${process.env.PUBLIC_URL}/verbs.json`).then(r => r.data)\r\n    }\r\n}","import {verbsAPI} from \"../api/verbs-api\";\r\n\r\nconst FETCHING_START = 'FETCHING_START'\r\nconst FETCHING_COMPLETE = 'FETCHING_COMPLETE'\r\nconst GET_VERBS_SUCCESS = 'GET_VERBS_SUCCESS'\r\nconst GET_VERBS_FAIL = 'GET_VERBS_SUCCESS'\r\nconst UPDATE_VERBS = 'UPDATE_VERBS'\r\n\r\nconst initialState = {\r\n    verbs: [],\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const challengeReducer = (state = initialState, action) => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case FETCHING_START: {\r\n            return {...state, isFetching: true}\r\n        }\r\n        case FETCHING_COMPLETE: {\r\n            return {...state, isFetching: false}\r\n        }\r\n        case GET_VERBS_SUCCESS: {\r\n            return {...state, verbs: [...payload], error: false}\r\n        }\r\n        case GET_VERBS_FAIL: {\r\n            return {...state, error: true}\r\n        }\r\n        case UPDATE_VERBS: {\r\n            return {...state, verbs: [...payload]}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateVerbs = (payload) => {\r\n    return {\r\n        type: UPDATE_VERBS,\r\n        payload\r\n    }\r\n}\r\n\r\nconst startFetching = () => {\r\n    return {\r\n        type: FETCHING_START\r\n    }\r\n}\r\nconst completeFetching = () => {\r\n    return {\r\n        type: FETCHING_COMPLETE\r\n    }\r\n}\r\nconst getVerbsSuccess = (payload) => {\r\n    return {\r\n        type: GET_VERBS_SUCCESS,\r\n        payload\r\n    }\r\n}\r\nconst getVerbsFail = () => {\r\n    return {\r\n        type: GET_VERBS_FAIL\r\n    }\r\n}\r\n\r\nexport const getVerbs = () => async (dispatch) => {\r\n    try {\r\n        dispatch(startFetching())\r\n        const response = await verbsAPI.getVerbs()\r\n        localStorage.setItem('verbs', JSON.stringify(response))\r\n        dispatch(getVerbsSuccess(response))\r\n        dispatch(completeFetching())\r\n    } catch (err) {\r\n        console.log(err)\r\n        dispatch(getVerbsFail())\r\n        dispatch(completeFetching())\r\n    }\r\n}","import {Button} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getVerbs} from \"../../redux/challenge-reducer\";\r\n\r\nconst Home = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getVerbs())\r\n    }, [])\r\n\r\n    return (\r\n        <section className=\"homepage\">\r\n            <span className=\"homepage__welcome\">Welcome to</span>\r\n            <h1 className=\"homepage__title\">Irregular Verbs Challenge</h1>\r\n            <p className=\"homepage__subtitle\">\r\n                Try yourself in this challenge for check your knowledge about irregular verbs\r\n            </p>\r\n            <hr/>\r\n            <p className=\"homepage__faq\">\r\n                What to do? → enter three forms of verbs as many times in a row as you can.\r\n            </p>\r\n            <div className=\"homepage__controls\">\r\n                <Button variant=\"outlined\" className=\"homepage__button\" component={Link} to={'/competitive'}>Competitive\r\n                    mode</Button>\r\n                <span className=\"homepage__buttons-divider\">or</span>\r\n                <Button variant=\"outlined\" className=\"homepage__button\" component={Link} to={'/learn'}>Learning\r\n                    mode</Button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Home","export default __webpack_public_path__ + \"static/media/heart.b0e72901.png\";","import React, {useEffect, useState} from \"react\";\r\nimport heartImage from \"../../../assets/images/heart.png\"\r\n\r\n\r\nconst ChallengeHeader = React.memo(({currentVerb, score, life, setIsTyping}) => {\r\n\r\n    const [isUntyped, setIsUntyped] = useState(false)\r\n\r\n    const [challenge, setChallenge] = useState('Okay, here we go!!!')\r\n    const [cursor, setCursor] = useState(false)\r\n    const [showCursor, setShowCursor] = useState(false)\r\n\r\n    const untype = () => {\r\n        let text = currentVerb.infinitive\r\n        setTimeout(() => {\r\n            text = text.slice(0, challenge.length + 1)\r\n            setChallenge(text.trim())\r\n        }, 100)\r\n    }\r\n\r\n    const type = () => {\r\n        let text = challenge\r\n        setTimeout(() => {\r\n            text = text.slice(0, text.length - 1)\r\n            setChallenge(text)\r\n            if (challenge.length === 0) {\r\n                setIsUntyped(true)\r\n                setChallenge(String(' '))\r\n            }\r\n        }, 100)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isUntyped && currentVerb.infinitive !== challenge) {\r\n            setIsTyping(true)\r\n            type()\r\n        } else if (isUntyped && currentVerb.infinitive !== challenge) {\r\n            untype()\r\n        } else {\r\n            setIsTyping(false)\r\n            setIsUntyped(false)\r\n        }\r\n        if (!cursor) {\r\n            setCursor(true)\r\n            setInterval(() => {\r\n                setShowCursor(prev => !prev)\r\n            }, 1000)\r\n        }\r\n    }, [currentVerb, challenge])\r\n\r\n    return(\r\n        <div className=\"challenge__block\">\r\n            <span className=\"challenge__lives\">{life.map((l, i) => <img key={i} className={'challenge__heart'} src={heartImage} alt={life.length}/>)}</span>\r\n            <span className=\"challenge__score\">score: {score}</span>\r\n            <h1 className=\"challenge__verb\">\r\n                {challenge}<span className={'challenge__cursor'}>{showCursor ? \"|\" : <>&nbsp;</>}</span>\r\n            </h1>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ChallengeHeader","import {Button, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CompetitiveFrom = ({onSubmit, setStatus, isSubmit, errors, generateVerb, setErrors, setIsSubmit, life, isTyping}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            infinitive: '',\r\n            past: '',\r\n            pastParticiple: ''\r\n        },\r\n        onSubmit\r\n    })\r\n\r\n    const handleSwitchStep = () => {\r\n        formik.resetForm()\r\n        setErrors({\r\n            infinitive: '',\r\n            past: '',\r\n            pastParticiple: '',\r\n        })\r\n        setStatus('default')\r\n        setIsSubmit(false)\r\n        generateVerb()\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={formik.handleSubmit} autoComplete={'off'}>\r\n            <div className=\"challenge__input-group\">\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'Infinitive'}\r\n                    type=\"text\"\r\n                    name=\"infinitive\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.infinitive}\r\n                />\r\n                {formik.errors.infinitive && formik.touched.infinitive && formik.errors.infinitive}\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    error={!!errors.past}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'2-nd form'}\r\n                    type=\"text\"\r\n                    name=\"past\"\r\n                    helperText={errors.past}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.past}\r\n                />\r\n                {formik.errors.past && formik.touched.past && formik.errors.past}\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    error={!!errors.pastParticiple}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'3-rd form'}\r\n                    type=\"text\"\r\n                    name=\"pastParticiple\"\r\n                    helperText={errors.pastParticiple}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.pastParticiple}\r\n                />\r\n                {formik.errors.pastParticiple && formik.touched.pastParticiple && formik.errors.pastParticiple}\r\n            </div>\r\n            <div className=\"challenge__button-group\">\r\n                <Button disabled={isSubmit || isTyping} fullWidth className={'challenge__button'} variant={'contained'} color={'primary'}\r\n                        type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                {life.length === 0\r\n                    ?\r\n                    <Button disabled={!isSubmit} fullWidth className={'challenge__button'} variant={'contained'} component={Link} to={'/result'}>\r\n                        Exit\r\n                    </Button>\r\n                    :\r\n                    <Button onClick={handleSwitchStep} disabled={!isSubmit} fullWidth className={'challenge__button'} variant={'contained'} color={'secondary'}>\r\n                        Next\r\n                    </Button>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default CompetitiveFrom","\r\nconst UPDATE_RESULT = 'UPDATE_RESULT'\r\n\r\nconst initialState = {\r\n    totalScore: localStorage.getItem('totalScore'),\r\n    score: 0,\r\n    mistakesList: []\r\n}\r\n\r\nexport const resultReducer = (state = initialState, action) => {\r\n    const {type, payload} = action\r\n    switch (type) {\r\n        case UPDATE_RESULT: {\r\n            debugger\r\n            let totalScore\r\n            if (localStorage.getItem('totalScore')) {\r\n                totalScore = parseFloat(localStorage.getItem('totalScore'))\r\n                totalScore = totalScore < payload.score ? payload.score : totalScore\r\n                localStorage.removeItem('totalScore')\r\n                localStorage.setItem('totalScore', totalScore)\r\n            } else {\r\n                localStorage.setItem('totalScore', payload.score)\r\n                totalScore = payload.score\r\n            }\r\n            return {\r\n                ...state, mistakesList: {...payload.mistakesList}, score: payload.score, totalScore: totalScore\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateResult = (payload) => {\r\n    return {\r\n        type: UPDATE_RESULT,\r\n        payload\r\n    }\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updateVerbs} from \"../../redux/challenge-reducer\";\r\nimport ChallengeHeader from \"./ChallengeHeadear/CompetitiveHeader\";\r\nimport CompetitiveFrom from \"./ChallengeForm/CompetitiveFrom\";\r\nimport {updateResult} from \"../../redux/result-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Competitive = React.memo((props) => {\r\n\r\n    let verbsList = useSelector(state => state.challenge.verbs)\r\n\r\n    verbsList = verbsList.length === 0 ? JSON.parse(localStorage.getItem('verbs')) : verbsList\r\n    const [mistakesList, setMistakesList] = useState()\r\n    const [life, setLife] = useState([1, 1, 1, 1, 1, 1])\r\n    const [score, setScore] = useState(0)\r\n    const [isTyping, setIsTyping] = useState(true)\r\n    const [currentVerb, setCurrentVerb] = useState('')\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    let [errors, setErrors] = useState({\r\n        infinitive: '',\r\n        past: '',\r\n        pastParticiple: ''\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const generateVerb = () => {\r\n        let index = Math.floor(Math.random() * verbsList.length)\r\n        setCurrentVerb(verbsList[index])\r\n        let newVerbsList = [...verbsList]\r\n        newVerbsList.splice(index, 1)\r\n        dispatch(updateVerbs(newVerbsList))\r\n    }\r\n\r\n    const handleSubmit = (values) => {\r\n        let errorsCount = 0\r\n        setIsSubmit(true)\r\n        Object.keys(values).map(key => {\r\n            if (currentVerb[key].toLowerCase().trim() !== values[key].toLowerCase().trim()) {\r\n                errorsCount++\r\n                setMistakesList(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        [currentVerb.infinitive]: {\r\n                            infinitive: currentVerb.infinitive,\r\n                            past: currentVerb.past,\r\n                            pastParticiple: currentVerb.pastParticiple,\r\n                            userInfinitive: values.infinitive,\r\n                            userPast: values.past,\r\n                            userPastParticiple: values.pastParticiple,\r\n                        }\r\n                    }\r\n                })\r\n                setErrors(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        [key]: currentVerb[key]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        if (errorsCount === 0) {\r\n            props.setStatus('success')\r\n            setScore(prev => prev + 1)\r\n        } else if (errorsCount === 1) {\r\n            props.setStatus('mistake')\r\n            setLife(prev => prev.slice(0, prev.length - 1))\r\n            setScore(prev => prev + 0.5)\r\n        } else {\r\n            setLife(prev => prev.slice(0, prev.length - 2))\r\n            props.setStatus('wrong')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateVerb()\r\n    }, [])\r\n\r\n\r\n    if (life.length === 0) {\r\n        let data = {\r\n            mistakesList,\r\n            score\r\n        }\r\n        dispatch(updateResult(data))\r\n    }\r\n\r\n    return (\r\n        <section className=\"challenge\">\r\n            <ChallengeHeader\r\n                setIsTyping={setIsTyping}\r\n                currentVerb={currentVerb}\r\n                score={score}\r\n                life={life}\r\n                mistakesList={mistakesList}\r\n            />\r\n            <CompetitiveFrom\r\n                isTyping={isTyping}\r\n                setStatus={props.setStatus}\r\n                onSubmit={handleSubmit}\r\n                generateVerb={generateVerb}\r\n                errors={errors}\r\n                isSubmit={isSubmit}\r\n                setErrors={setErrors}\r\n                setIsSubmit={setIsSubmit}\r\n                life={life}\r\n            />\r\n        </section>\r\n    )\r\n})\r\n\r\n\r\n\r\nexport default Competitive","import {\r\n    Box,\r\n    Button,\r\n    Collapse,\r\n    IconButton,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport {useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst EndPage = ({setStatus}) => {\r\n\r\n    useEffect(() => {\r\n        setStatus('default')\r\n    }, [])\r\n\r\n    let result = useSelector(state => state.result)\r\n    return (\r\n        <div className={'results'}>\r\n            <h1 className=\"results__title\">Congratulations! You complete challenge!</h1>\r\n            <span className=\"results__score\">Your score: {result.score}</span>\r\n            <span className=\"results__score\">Your total score: {result.totalScore}</span>\r\n            <div className=\"results__mistakes\">\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align={'center'} colSpan={2}>Your mistakes</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {Object.keys(result.mistakesList).map((key, index) => <Row key={index} verb={key}\r\n                                                                                       mistake={result.mistakesList[key]}/>)}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n            <div className=\"results__controls\">\r\n                <Button className={'results__control'} variant={'outlined'} component={Link} to={'/competitive'}>Play\r\n                    again</Button>\r\n                <Button className={'results__control'} variant={'outlined'} component={Link} to={'/learn'}>Learn\r\n                    verbs</Button>\r\n                <Button className={'results__control'} variant={'outlined'} component={Link}\r\n                        to={'/leaderboard'}>Leaderboard</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Row({verb, mistake}) {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <TableRow>\r\n                <TableCell onClick={() => setOpen(!open)} component=\"th\" scope=\"row\" align={'center'}>\r\n                    <IconButton aria-label=\"expand row\" size=\"small\">\r\n                        {open ? <KeyboardArrowUpIcon/> : <KeyboardArrowDownIcon/>}\r\n                    </IconButton>\r\n                    {verb}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{paddingBottom: 0, paddingTop: 0}} colSpan={6}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box margin={1}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                {verb}\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Your answer</TableCell>\r\n                                        <TableCell>Right answer</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            {mistake.userInfinitive}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {mistake.infinitive}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            {mistake.userPast}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {mistake.past}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>\r\n                                            {mistake.userPastParticiple}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {mistake.pastParticiple}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EndPage","import {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Loader = React.memo(() => {\r\n    return(\r\n        <div className={\"progress\"}>\r\n            <CircularProgress size={100}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Loader","import {Button, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {useContext} from \"react\";\r\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\r\nimport {Context} from \"../../index\";\r\nimport firebase from \"firebase\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst LeaderBoard = () => {\r\n\r\n    let username = localStorage.getItem('challenge_name')\r\n    let cachedScore = localStorage.getItem('totalScore')\r\n\r\n    let result = useSelector(state => state.result)\r\n\r\n    const {firestore} = useContext(Context)\r\n    const [users, loading] = useCollectionData(\r\n        firestore.collection('leaderboard').orderBy('totalScore', 'desc')\r\n    )\r\n\r\n    const onSubmit = async (value) => {\r\n        if (username) {\r\n            await firestore.collection('leaderboard').doc(username).update({\r\n                name: username,\r\n                totalScore: result.totalScore,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n        } else {\r\n            localStorage.setItem('challenge_name', value.name)\r\n            await firestore.collection('leaderboard').doc(value.name).set({\r\n                name: value.name,\r\n                totalScore: +result.totalScore,\r\n                createdAt: firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: ''\r\n        },\r\n        onSubmit\r\n    })\r\n\r\n    if (loading) {\r\n        return <Loader/>\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"leaderboard\">\r\n            <div className=\"leaderboard__header\">\r\n                <span className=\"leaderboard__user-total\">{result.totalScore}</span>\r\n                <p className=\"leaderboard__question\">\r\n                    Do you want submit your total score to leaderboard?\r\n                </p>\r\n                <form onSubmit={formik.handleSubmit} className=\"leaderboard-controls\">\r\n                    <TextField\r\n                        onChange={formik.handleChange}\r\n                        inputProps={{\r\n                            readOnly: !!username\r\n                        }}\r\n                        value={username ? username : formik.values.name}\r\n                        name={'name'}\r\n                        type={'name'}\r\n                        variant={'outlined'}\r\n                        label={'Your name'}\r\n                    />\r\n                    <Button disabled={parseFloat(cachedScore) >= result.totalScore} type={'submit'} variant={'contained'}>Submit</Button>\r\n                </form>\r\n            </div>\r\n            <div className=\"leaderboard__footer\">\r\n                <h1 className=\"leaderboard__title\">Leaderboard</h1>\r\n                <div className=\"leaderboard__table-wrapper\">\r\n                    <table className=\"leaderboard__table\">\r\n                        <thead className={'leaderboard__table-head'}>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Score</th>\r\n                            <th>Date</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody className={'leaderboard__table-body'}>\r\n                        {users.map((user, index) => {\r\n                            return(\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td>{user.name}</td>\r\n                                    <td>{user.totalScore}</td>\r\n                                    <td>{new Date(user.createdAt?.seconds*1000).toDateString()}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div className=\"results__controls\">\r\n                <Button className={'results__control'} variant={'outlined'} component={Link} to={'/competitive'}>Play\r\n                    again</Button>\r\n                <Button className={'results__control'} variant={'outlined'} component={Link} to={'/learn'}>Learn\r\n                    verbs</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LeaderBoard","import React, {useEffect, useState} from \"react\";\r\n\r\n\r\nconst LearnHeader = React.memo(({currentVerb, setIsTyping}) => {\r\n\r\n    const [isUntyped, setIsUntyped] = useState(false)\r\n\r\n    const [challenge, setChallenge] = useState('Start!!!')\r\n    const [cursor, setCursor] = useState(false)\r\n    const [showCursor, setShowCursor] = useState(false)\r\n\r\n\r\n    const untype = () => {\r\n        let text = currentVerb.infinitive\r\n        setTimeout(() => {\r\n            text = text.slice(0, challenge.length + 1)\r\n            setChallenge(text.trim())\r\n        }, 100)\r\n    }\r\n\r\n    const type = () => {\r\n        let text = challenge\r\n        setTimeout(() => {\r\n            text = text.slice(0, text.length - 1)\r\n            setChallenge(text)\r\n            if (challenge.length === 0) {\r\n                setIsUntyped(true)\r\n                setChallenge(String(' '))\r\n            }\r\n        }, 100)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isUntyped && currentVerb.infinitive !== challenge) {\r\n            setIsTyping(true)\r\n            type()\r\n        } else if (isUntyped && currentVerb.infinitive !== challenge) {\r\n            untype()\r\n        } else {\r\n            setIsTyping(false)\r\n            setIsUntyped(false)\r\n        }\r\n        if (!cursor) {\r\n            setCursor(true)\r\n            setInterval(() => {\r\n                setShowCursor(prev => !prev)\r\n            }, 1000)\r\n        }\r\n    }, [currentVerb, challenge])\r\n\r\n    return (\r\n        <div className=\"challenge__block\">\r\n            <h1 className=\"challenge__verb\">\r\n                {challenge}<span className={'challenge__cursor'}>{showCursor ? \"|\" : <>&nbsp;</>}</span>\r\n            </h1>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LearnHeader","import {Button, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport React from \"react\";\r\n\r\nconst LearnFrom = ({onSubmit, setStatus, isSubmit, errors, generateVerb, setErrors, setIsSubmit, isTyping}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            infinitive: '',\r\n            past: '',\r\n            pastParticiple: ''\r\n        },\r\n        onSubmit\r\n    })\r\n\r\n    const handleSwitchStep = () => {\r\n        formik.resetForm()\r\n        setErrors({\r\n            infinitive: '',\r\n            past: '',\r\n            pastParticiple: '',\r\n        })\r\n        setStatus('default')\r\n        setIsSubmit(false)\r\n        generateVerb()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} autoComplete={'off'}>\r\n            <div className=\"challenge__input-group\">\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'Infinitive'}\r\n                    type=\"text\"\r\n                    name=\"infinitive\"\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.infinitive}\r\n                />\r\n                {formik.errors.infinitive && formik.touched.infinitive && formik.errors.infinitive}\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    error={!!errors.past}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'2-nd form'}\r\n                    type=\"text\"\r\n                    name=\"past\"\r\n                    helperText={errors.past}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.past}\r\n                />\r\n                {formik.errors.past && formik.touched.past && formik.errors.past}\r\n                <TextField\r\n                    InputProps={{\r\n                        readOnly: isSubmit,\r\n                    }}\r\n                    error={!!errors.pastParticiple}\r\n                    className={'challenge__input'}\r\n                    variant={'outlined'}\r\n                    label={'3-rd form'}\r\n                    type=\"text\"\r\n                    name=\"pastParticiple\"\r\n                    helperText={errors.pastParticiple}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    value={formik.values.pastParticiple}\r\n                />\r\n                {formik.errors.pastParticiple && formik.touched.pastParticiple && formik.errors.pastParticiple}\r\n            </div>\r\n            <div className=\"challenge__button-group\">\r\n                <Button disabled={isSubmit || isTyping} fullWidth className={'challenge__button'} variant={'contained'}\r\n                        color={'primary'}\r\n                        type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n                <Button onClick={handleSwitchStep} disabled={!isSubmit} fullWidth className={'challenge__button'}\r\n                        variant={'contained'} color={'secondary'}>\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default LearnFrom","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updateVerbs} from \"../../redux/challenge-reducer\";\r\nimport {updateResult} from \"../../redux/result-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport LearnHeader from \"./LearnHeader/LearnHeader\";\r\nimport LearnForm from \"./LearnForm/LearnForm\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\nconst Learn = React.memo((props) => {\r\n\r\n    let verbsList = useSelector(state => state.challenge.verbs)\r\n\r\n    verbsList = verbsList.length === 0 ? JSON.parse(localStorage.getItem('verbs')) : verbsList\r\n    const [isTyping, setIsTyping] = useState(true)\r\n    const [isStop, setIsStop] = useState(false)\r\n    const [mistakesList, setMistakesList] = useState()\r\n    const [currentVerb, setCurrentVerb] = useState('')\r\n    const [isSubmit, setIsSubmit] = useState(false)\r\n    let [errors, setErrors] = useState({\r\n        infinitive: '',\r\n        past: '',\r\n        pastParticiple: ''\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const generateVerb = () => {\r\n        let index = Math.floor(Math.random() * verbsList.length)\r\n        setCurrentVerb(verbsList[index])\r\n        let newVerbsList = [...verbsList]\r\n        newVerbsList.splice(index, 1)\r\n        dispatch(updateVerbs(newVerbsList))\r\n    }\r\n\r\n    const handleSubmit = (values) => {\r\n        let errorsCount = 0\r\n        setIsSubmit(true)\r\n        Object.keys(values).map(key => {\r\n            if (currentVerb[key].toLowerCase().trim() !== values[key].toLowerCase().trim()) {\r\n                errorsCount++\r\n                setMistakesList(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        [currentVerb.infinitive]: {\r\n                            infinitive: currentVerb.infinitive,\r\n                            past: currentVerb.past,\r\n                            pastParticiple: currentVerb.pastParticiple,\r\n                            userInfinitive: values.infinitive,\r\n                            userPast: values.past,\r\n                            userPastParticiple: values.pastParticiple,\r\n                        }\r\n                    }\r\n                })\r\n                setErrors(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        [key]: currentVerb[key]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        if (errorsCount === 0) {\r\n            props.setStatus('success')\r\n        } else if (errorsCount === 1) {\r\n            props.setStatus('mistake')\r\n        } else {\r\n            props.setStatus('wrong')\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateVerb()\r\n    }, [])\r\n\r\n    if (isStop) {\r\n        let data = {\r\n            mistakesList,\r\n            score: 0\r\n        }\r\n        dispatch(updateResult(data))\r\n        return <Redirect to={'/result'}/>\r\n    }\r\n\r\n    return (\r\n        <section className=\"challenge\">\r\n            <LearnHeader\r\n                setIsTyping={setIsTyping}\r\n                currentVerb={currentVerb}\r\n            />\r\n            <LearnForm\r\n                isTyping={isTyping}\r\n                setStatus={props.setStatus}\r\n                onSubmit={handleSubmit}\r\n                generateVerb={generateVerb}\r\n                errors={errors}\r\n                isSubmit={isSubmit}\r\n                setErrors={setErrors}\r\n                setIsSubmit={setIsSubmit}\r\n            />\r\n            <div className=\"challenge__controls\">\r\n                <Button onClick={() => setIsStop(true)} className=\"challenge__stop\" variant={'outlined'}>Stop</Button>\r\n            </div>\r\n        </section>\r\n    )\r\n})\r\n\r\n\r\nexport default Learn","import './App.css';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport Home from \"./Components/Home/Home\";\nimport Competitive from \"./Components/Challenge/Competitive\";\nimport {useState} from \"react\";\nimport EndPage from \"./Components/EndPage/EndPage\";\nimport LeaderBoard from \"./Components/LeaderBoard/LeaderBoard\";\nimport Learn from \"./Components/Learn/Learn\";\n\n\nfunction App() {\n\n    const [status, setStatus] = useState('default')\n\n    return (\n        <div className={`App ${status !== 'default' ? status : ''}`}>\n            <HashRouter>\n                <Switch>\n                    <Route exact path={'/'} component={Home}/>\n                    <Route exact path={'/competitive'}>\n                        <Competitive setStatus={setStatus}/>\n                    </Route>\n                    <Route exact path={'/learn'}>\n                        <Learn setStatus={setStatus}/>\n                    </Route>\n                    <Route exact path={'/result'}>\n                        <EndPage setStatus={setStatus}/>\n                    </Route>\n                    <Route exact path={'/leaderboard'} component={LeaderBoard}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {challengeReducer} from \"./challenge-reducer\";\r\nimport {resultReducer} from \"./result-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    challenge: challengeReducer,\r\n    result: resultReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nlet store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\nwindow.__store__ = store\r\n\r\nexport default store","import React, {createContext} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport firebase from \"firebase\";\nimport 'firebase/firestore'\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyCDoeY_OPEmje0hYhb_9yNbTbNFB882Yhc\",\n    authDomain: \"chat-app-7804e.firebaseapp.com\",\n    projectId: \"chat-app-7804e\",\n    storageBucket: \"chat-app-7804e.appspot.com\",\n    messagingSenderId: \"312475671256\",\n    appId: \"1:312475671256:web:216fd867818b69ef8fd5ad\",\n    measurementId: \"G-0121KC8CJC\"\n});\n\nexport const Context = createContext(null)\n\nconst firestore = firebase.firestore()\n\nReactDOM.render(\n    <Context.Provider value={{\n        firestore,\n        firebase\n    }}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </Context.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}